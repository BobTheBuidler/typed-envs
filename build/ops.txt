def create_env(name, typ, default, init_args, string_converter, verbose, init_kwargs):
    name :: str
    typ, default :: object
    init_args :: tuple
    string_converter :: union[object, None]
    verbose :: bool
    init_kwargs :: dict
    r0 :: object
    r1 :: dict
    r2 :: str
    r3 :: object
    r4 :: str
    r5 :: object
    r6 :: list
    r7, r8, r9, r10 :: ptr
    r11 :: object
    r12, r13 :: str
    r14 :: object
    r15 :: dict
    r16 :: i32
    r17 :: bit
    r18 :: tuple
    r19, r20 :: object
L0:
    if is_error(string_converter) goto L1 else goto L14
L1:
    r0 = box(None, 1)
    inc_ref r0
    string_converter = r0
L2:
    if is_error(verbose) goto L3 else goto L4
L3:
    verbose = 1
L4:
    r1 = typed_envs.globals :: static
    r2 = 'default_factory'
    r3 = CPyDict_GetItem(r1, r2)
    if is_error(r3) goto L15 (error at create_env:104) else goto L5
L5:
    r4 = 'create_env'
    r5 = CPyObject_GetAttr(r3, r4)
    dec_ref r3
    if is_error(r5) goto L15 (error at create_env:104) else goto L6
L6:
    r6 = PyList_New(3)
    if is_error(r6) goto L16 (error at create_env:104) else goto L7
L7:
    r7 = get_element_ptr r6 ob_item :: PyListObject
    r8 = load_mem r7 :: ptr*
    inc_ref name
    set_mem r8, name :: builtins.object*
    inc_ref typ
    r9 = r8 + 8
    set_mem r9, typ :: builtins.object*
    inc_ref default
    r10 = r8 + 16
    set_mem r10, default :: builtins.object*
    r11 = CPyList_Extend(r6, init_args)
    if is_error(r11) goto L17 (error at create_env:104) else goto L18
L8:
    r12 = 'string_converter'
    r13 = 'verbose'
    r14 = box(bool, verbose)
    r15 = CPyDict_Build(2, r12, string_converter, r13, r14)
    dec_ref string_converter
    if is_error(r15) goto L19 (error at create_env:104) else goto L9
L9:
    r16 = CPyDict_UpdateInDisplay(r15, init_kwargs)
    r17 = r16 >= 0 :: signed
    if not r17 goto L20 (error at create_env:104) else goto L10 :: bool
L10:
    r18 = PyList_AsTuple(r6)
    dec_ref r6
    if is_error(r18) goto L21 (error at create_env:104) else goto L11
L11:
    r19 = PyObject_Call(r5, r18, r15)
    dec_ref r5
    dec_ref r18
    dec_ref r15
    if is_error(r19) goto L13 (error at create_env:104) else goto L12
L12:
    return r19
L13:
    r20 = <error> :: object
    return r20
L14:
    inc_ref string_converter
    goto L2
L15:
    dec_ref string_converter
    goto L13
L16:
    dec_ref string_converter
    dec_ref r5
    goto L13
L17:
    dec_ref string_converter
    dec_ref r5
    dec_ref r6
    goto L13
L18:
    dec_ref r11
    goto L8
L19:
    dec_ref r5
    dec_ref r6
    goto L13
L20:
    dec_ref r5
    dec_ref r6
    dec_ref r15
    goto L13
L21:
    dec_ref r5
    dec_ref r15
    goto L13

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16, r17 :: object
    r18 :: str
    r19 :: dict
    r20, r21 :: object
    r22 :: str
    r23 :: dict
    r24 :: object
    r25 :: str
    r26 :: dict
    r27 :: str
    r28 :: i32
    r29 :: bit
    r30 :: str
    r31 :: dict
    r32 :: str
    r33 :: i32
    r34 :: bit
    r35 :: str
    r36 :: dict
    r37 :: str
    r38 :: object
    r39 :: object[1]
    r40 :: object_ptr
    r41 :: object
    r42 :: dict
    r43 :: str
    r44 :: i32
    r45 :: bit
    r46, r47, r48, r49, r50 :: str
    r51 :: list
    r52, r53, r54, r55, r56, r57 :: ptr
    r58 :: dict
    r59 :: str
    r60 :: i32
    r61 :: bit
    r62 :: dict
    r63 :: str
    r64 :: object
    r65 :: dict
    r66 :: str
    r67 :: object
    r68 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L18 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Any', 'Optional', 'Type', 'TypeVar')
    r6 = 'typing'
    r7 = typed_envs.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L18 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('EnvironmentVariable',)
    r10 = 'typed_envs._env_var'
    r11 = typed_envs.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L18 (error at <module>:3) else goto L5
L5:
    typed_envs._env_var = r12 :: module
    dec_ref r12
    r13 = ('EnvVarFactory', 'logger', 'default_factory')
    r14 = 'typed_envs.factory'
    r15 = typed_envs.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L18 (error at <module>:4) else goto L6
L6:
    typed_envs.factory = r16 :: module
    dec_ref r16
    r17 = ('ENVIRONMENT', '_ENVIRONMENT_VARIABLES_SET_BY_USER', '_ENVIRONMENT_VARIABLES_USING_DEFAULTS')
    r18 = 'typed_envs.registry'
    r19 = typed_envs.globals :: static
    r20 = CPyImport_ImportFromMany(r18, r17, r17, r19)
    if is_error(r20) goto L18 (error at <module>:5) else goto L7
L7:
    typed_envs.registry = r20 :: module
    dec_ref r20
    r21 = ('StringConverter',)
    r22 = 'typed_envs.typing'
    r23 = typed_envs.globals :: static
    r24 = CPyImport_ImportFromMany(r22, r21, r21, r23)
    if is_error(r24) goto L18 (error at <module>:10) else goto L8
L8:
    typed_envs.typing = r24 :: module
    dec_ref r24
    r25 = 'typed_envs is used to create specialized `EnvironmentVariable` objects that behave exactly the same as any other instance of the `typ` used to create them.\n\ntyped_envs is used for:\n    - defining your envs in a readable, user friendly way\n    - enhancing type hints for the returned instances\n    - enhancing __repr__ of the returned instance with extra contextual information\n'
    r26 = typed_envs.globals :: static
    r27 = 'description'
    r28 = CPyDict_SetItem(r26, r27, r25)
    r29 = r28 >= 0 :: signed
    if not r29 goto L18 (error at <module>:13) else goto L9 :: bool
L9:
    r30 = '\nIn the example below, `some_var` can be used just like as any other `int` object.\n\n```\nimport typed_envs\nsome_var = typed_envs.create_env("SET_WITH_THIS_ENV", int, 10)\n>>> isinstance(some_var, int)\nTrue\n>>> isinstance(some_var, EnvironmentVariable)\nTrue\n```\n\nThere are only 2 differences between `some_var` and `int(10)`:\n    - `some_var` will properly type check as an instance of both `int` and `EnvironmentVariable`\n    - `some_var.__repr__()` will include contextual information about the `EnvironmentVariable`.\n\n```\n>>> some_var\n<EnvironmentVariable[name=`SET_WITH_THIS_ENV`, type=int, default_value=10, current_value=10, using_default=True]>\n>>> str(some_var)\n"10"\n>>> some_var + 5\n15\n>>> 20 / some_var\n2\n```\n\n'
    r31 = typed_envs.globals :: static
    r32 = 'description_addon'
    r33 = CPyDict_SetItem(r31, r32, r30)
    r34 = r33 >= 0 :: signed
    if not r34 goto L18 (error at <module>:22) else goto L10 :: bool
L10:
    r35 = 'T'
    r36 = typed_envs.globals :: static
    r37 = 'TypeVar'
    r38 = CPyDict_GetItem(r36, r37)
    if is_error(r38) goto L18 (error at <module>:52) else goto L11
L11:
    r39 = [r35]
    r40 = load_address r39
    r41 = PyObject_Vectorcall(r38, r40, 1, 0)
    dec_ref r38
    if is_error(r41) goto L18 (error at <module>:52) else goto L12
L12:
    r42 = typed_envs.globals :: static
    r43 = 'T'
    r44 = CPyDict_SetItem(r42, r43, r41)
    dec_ref r41
    r45 = r44 >= 0 :: signed
    if not r45 goto L18 (error at <module>:52) else goto L13 :: bool
L13:
    r46 = 'create_env'
    r47 = 'EnvVarFactory'
    r48 = 'ENVIRONMENT'
    r49 = '_ENVIRONMENT_VARIABLES_SET_BY_USER'
    r50 = '_ENVIRONMENT_VARIABLES_USING_DEFAULTS'
    r51 = PyList_New(5)
    if is_error(r51) goto L18 (error at <module>:115) else goto L14
L14:
    r52 = get_element_ptr r51 ob_item :: PyListObject
    r53 = load_mem r52 :: ptr*
    inc_ref r46
    set_mem r53, r46 :: builtins.object*
    inc_ref r47
    r54 = r53 + 8
    set_mem r54, r47 :: builtins.object*
    inc_ref r48
    r55 = r53 + 16
    set_mem r55, r48 :: builtins.object*
    inc_ref r49
    r56 = r53 + 24
    set_mem r56, r49 :: builtins.object*
    inc_ref r50
    r57 = r53 + 32
    set_mem r57, r50 :: builtins.object*
    r58 = typed_envs.globals :: static
    r59 = '__all__'
    r60 = CPyDict_SetItem(r58, r59, r51)
    dec_ref r51
    r61 = r60 >= 0 :: signed
    if not r61 goto L18 (error at <module>:115) else goto L15 :: bool
L15:
    r62 = typed_envs.globals :: static
    r63 = 'EnvironmentVariable'
    r64 = CPyDict_GetItem(r62, r63)
    if is_error(r64) goto L18 (error at <module>:124) else goto L19
L16:
    r65 = typed_envs.globals :: static
    r66 = 'logger'
    r67 = CPyDict_GetItem(r65, r66)
    if is_error(r67) goto L18 (error at <module>:125) else goto L20
L17:
    return 1
L18:
    r68 = <error> :: None
    return r68
L19:
    dec_ref r64
    goto L16
L20:
    dec_ref r67
    goto L17

def _register_new_env(name, instance):
    name :: str
    instance :: object
    r0 :: dict
    r1 :: bool
    r2 :: i32
    r3 :: bit
    r4 :: str
    r5 :: object
    r6 :: bool
    r7 :: dict
    r8 :: bool
    r9 :: i32
    r10 :: bit
    r11 :: dict
    r12 :: bool
    r13 :: i32
    r14 :: bit
    r15 :: None
L0:
    r0 = typed_envs.registry.ENVIRONMENT :: static
    if is_error(r0) goto L1 else goto L3
L1:
    r1 = raise NameError('value for final name "ENVIRONMENT" was not set')
    if not r1 goto L16 (error at _register_new_env:13) else goto L2 :: bool
L2:
    unreachable
L3:
    r2 = CPyDict_SetItem(r0, name, instance)
    r3 = r2 >= 0 :: signed
    if not r3 goto L16 (error at _register_new_env:13) else goto L4 :: bool
L4:
    r4 = '_using_default'
    r5 = CPyObject_GetAttr(instance, r4)
    if is_error(r5) goto L16 (error at _register_new_env:14) else goto L5
L5:
    r6 = unbox(bool, r5)
    dec_ref r5
    if is_error(r6) goto L16 (error at _register_new_env:14) else goto L6
L6:
    if r6 goto L7 else goto L11 :: bool
L7:
    r7 = typed_envs.registry._ENVIRONMENT_VARIABLES_USING_DEFAULTS :: static
    if is_error(r7) goto L8 else goto L10
L8:
    r8 = raise NameError('value for final name "_ENVIRONMENT_VARIABLES_USING_DEFAULTS" was not set')
    if not r8 goto L16 (error at _register_new_env:15) else goto L9 :: bool
L9:
    unreachable
L10:
    r9 = CPyDict_SetItem(r7, name, instance)
    r10 = r9 >= 0 :: signed
    if not r10 goto L16 (error at _register_new_env:15) else goto L15 :: bool
L11:
    r11 = typed_envs.registry._ENVIRONMENT_VARIABLES_SET_BY_USER :: static
    if is_error(r11) goto L12 else goto L14
L12:
    r12 = raise NameError('value for final name "_ENVIRONMENT_VARIABLES_SET_BY_USER" was not set')
    if not r12 goto L16 (error at _register_new_env:17) else goto L13 :: bool
L13:
    unreachable
L14:
    r13 = CPyDict_SetItem(r11, name, instance)
    r14 = r13 >= 0 :: signed
    if not r14 goto L16 (error at _register_new_env:17) else goto L15 :: bool
L15:
    return 1
L16:
    r15 = <error> :: None
    return r15

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16 :: object
    r17, r18 :: dict
    r19 :: str
    r20 :: i32
    r21 :: bit
    r22, r23 :: dict
    r24 :: str
    r25 :: i32
    r26 :: bit
    r27, r28 :: dict
    r29 :: str
    r30 :: i32
    r31 :: bit
    r32, r33, r34 :: str
    r35 :: list
    r36, r37, r38, r39 :: ptr
    r40 :: dict
    r41 :: str
    r42 :: i32
    r43 :: bit
    r44 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L15 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('Final',)
    r6 = 'typing'
    r7 = typed_envs.registry.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L15 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('EnvironmentVariable',)
    r10 = 'typed_envs._env_var'
    r11 = typed_envs.registry.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L15 (error at <module>:3) else goto L5
L5:
    typed_envs._env_var = r12 :: module
    dec_ref r12
    r13 = ('EnvRegistry', 'VarName')
    r14 = 'typed_envs.typing'
    r15 = typed_envs.registry.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L15 (error at <module>:4) else goto L6
L6:
    typed_envs.typing = r16 :: module
    dec_ref r16
    r17 = PyDict_New()
    if is_error(r17) goto L15 (error at <module>:7) else goto L7
L7:
    typed_envs.registry.ENVIRONMENT = r17 :: static
    r18 = typed_envs.registry.globals :: static
    r19 = 'ENVIRONMENT'
    r20 = CPyDict_SetItem(r18, r19, r17)
    dec_ref r17
    r21 = r20 >= 0 :: signed
    if not r21 goto L15 (error at <module>:7) else goto L8 :: bool
L8:
    r22 = PyDict_New()
    if is_error(r22) goto L15 (error at <module>:8) else goto L9
L9:
    typed_envs.registry._ENVIRONMENT_VARIABLES_SET_BY_USER = r22 :: static
    r23 = typed_envs.registry.globals :: static
    r24 = '_ENVIRONMENT_VARIABLES_SET_BY_USER'
    r25 = CPyDict_SetItem(r23, r24, r22)
    dec_ref r22
    r26 = r25 >= 0 :: signed
    if not r26 goto L15 (error at <module>:8) else goto L10 :: bool
L10:
    r27 = PyDict_New()
    if is_error(r27) goto L15 (error at <module>:9) else goto L11
L11:
    typed_envs.registry._ENVIRONMENT_VARIABLES_USING_DEFAULTS = r27 :: static
    r28 = typed_envs.registry.globals :: static
    r29 = '_ENVIRONMENT_VARIABLES_USING_DEFAULTS'
    r30 = CPyDict_SetItem(r28, r29, r27)
    dec_ref r27
    r31 = r30 >= 0 :: signed
    if not r31 goto L15 (error at <module>:9) else goto L12 :: bool
L12:
    r32 = 'ENVIRONMENT'
    r33 = '_ENVIRONMENT_VARIABLES_SET_BY_USER'
    r34 = '_ENVIRONMENT_VARIABLES_USING_DEFAULTS'
    r35 = PyList_New(3)
    if is_error(r35) goto L15 (error at <module>:20) else goto L13
L13:
    r36 = get_element_ptr r35 ob_item :: PyListObject
    r37 = load_mem r36 :: ptr*
    inc_ref r32
    set_mem r37, r32 :: builtins.object*
    inc_ref r33
    r38 = r37 + 8
    set_mem r38, r33 :: builtins.object*
    inc_ref r34
    r39 = r37 + 16
    set_mem r39, r34 :: builtins.object*
    r40 = typed_envs.registry.globals :: static
    r41 = '__all__'
    r42 = CPyDict_SetItem(r40, r41, r35)
    dec_ref r35
    r43 = r42 >= 0 :: signed
    if not r43 goto L15 (error at <module>:20) else goto L14 :: bool
L14:
    return 1
L15:
    r44 = <error> :: None
    return r44

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8 :: object
    r9 :: str
    r10 :: object
    r11 :: dict
    r12 :: str
    r13 :: object
    r14 :: object[2]
    r15 :: object_ptr
    r16 :: object
    r17 :: dict
    r18 :: str
    r19 :: i32
    r20 :: bit
    r21 :: str
    r22 :: object
    r23 :: dict
    r24 :: str
    r25 :: object
    r26 :: object[2]
    r27 :: object_ptr
    r28 :: object
    r29 :: dict
    r30 :: str
    r31 :: i32
    r32 :: bit
    r33 :: str
    r34 :: dict
    r35 :: str
    r36 :: object
    r37 :: dict
    r38 :: str
    r39 :: object
    r40 :: str
    r41 :: tuple[object, str]
    r42, r43 :: object
    r44 :: dict
    r45 :: str
    r46 :: object
    r47 :: object[2]
    r48 :: object_ptr
    r49 :: object
    r50 :: dict
    r51 :: str
    r52 :: i32
    r53 :: bit
    r54 :: dict
    r55 :: str
    r56, r57 :: object
    r58 :: list
    r59, r60 :: ptr
    r61 :: dict
    r62 :: str
    r63 :: object
    r64 :: tuple[list, object]
    r65, r66 :: object
    r67 :: dict
    r68 :: str
    r69 :: i32
    r70 :: bit
    r71 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L23 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('TYPE_CHECKING', 'Any', 'Callable', 'Dict', 'NewType')
    r6 = 'typing'
    r7 = typed_envs.typing.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L23 (error at <module>:1) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    if 0 goto L5 else goto L5 :: bool
L5:
    r9 = 'VarName'
    r10 = load_address PyUnicode_Type
    r11 = typed_envs.typing.globals :: static
    r12 = 'NewType'
    r13 = CPyDict_GetItem(r11, r12)
    if is_error(r13) goto L23 (error at <module>:7) else goto L6
L6:
    r14 = [r9, r10]
    r15 = load_address r14
    r16 = PyObject_Vectorcall(r13, r15, 2, 0)
    dec_ref r13
    if is_error(r16) goto L23 (error at <module>:7) else goto L7
L7:
    r17 = typed_envs.typing.globals :: static
    r18 = 'VarName'
    r19 = CPyDict_SetItem(r17, r18, r16)
    dec_ref r16
    r20 = r19 >= 0 :: signed
    if not r20 goto L23 (error at <module>:7) else goto L8 :: bool
L8:
    r21 = 'VarValue'
    r22 = load_address PyUnicode_Type
    r23 = typed_envs.typing.globals :: static
    r24 = 'NewType'
    r25 = CPyDict_GetItem(r23, r24)
    if is_error(r25) goto L23 (error at <module>:8) else goto L9
L9:
    r26 = [r21, r22]
    r27 = load_address r26
    r28 = PyObject_Vectorcall(r25, r27, 2, 0)
    dec_ref r25
    if is_error(r28) goto L23 (error at <module>:8) else goto L10
L10:
    r29 = typed_envs.typing.globals :: static
    r30 = 'VarValue'
    r31 = CPyDict_SetItem(r29, r30, r28)
    dec_ref r28
    r32 = r31 >= 0 :: signed
    if not r32 goto L23 (error at <module>:8) else goto L11 :: bool
L11:
    r33 = 'EnvRegistry'
    r34 = typed_envs.typing.globals :: static
    r35 = 'Dict'
    r36 = CPyDict_GetItem(r34, r35)
    if is_error(r36) goto L23 (error at <module>:10) else goto L12
L12:
    r37 = typed_envs.typing.globals :: static
    r38 = 'VarName'
    r39 = CPyDict_GetItem(r37, r38)
    if is_error(r39) goto L24 (error at <module>:10) else goto L13
L13:
    r40 = 'EnvironmentVariable'
    inc_ref r40
    r41 = (r39, r40)
    r42 = box(tuple[object, str], r41)
    r43 = PyObject_GetItem(r36, r42)
    dec_ref r36
    dec_ref r42
    if is_error(r43) goto L23 (error at <module>:10) else goto L14
L14:
    r44 = typed_envs.typing.globals :: static
    r45 = 'NewType'
    r46 = CPyDict_GetItem(r44, r45)
    if is_error(r46) goto L25 (error at <module>:10) else goto L15
L15:
    r47 = [r33, r43]
    r48 = load_address r47
    r49 = PyObject_Vectorcall(r46, r48, 2, 0)
    dec_ref r46
    if is_error(r49) goto L25 (error at <module>:10) else goto L16
L16:
    dec_ref r43
    r50 = typed_envs.typing.globals :: static
    r51 = 'EnvRegistry'
    r52 = CPyDict_SetItem(r50, r51, r49)
    dec_ref r49
    r53 = r52 >= 0 :: signed
    if not r53 goto L23 (error at <module>:10) else goto L17 :: bool
L17:
    r54 = typed_envs.typing.globals :: static
    r55 = 'Callable'
    r56 = CPyDict_GetItem(r54, r55)
    if is_error(r56) goto L23 (error at <module>:12) else goto L18
L18:
    r57 = load_address PyUnicode_Type
    r58 = PyList_New(1)
    if is_error(r58) goto L26 (error at <module>:12) else goto L19
L19:
    r59 = get_element_ptr r58 ob_item :: PyListObject
    r60 = load_mem r59 :: ptr*
    inc_ref r57
    set_mem r60, r57 :: builtins.object*
    r61 = typed_envs.typing.globals :: static
    r62 = 'Any'
    r63 = CPyDict_GetItem(r61, r62)
    if is_error(r63) goto L27 (error at <module>:12) else goto L20
L20:
    r64 = (r58, r63)
    r65 = box(tuple[list, object], r64)
    r66 = PyObject_GetItem(r56, r65)
    dec_ref r56
    dec_ref r65
    if is_error(r66) goto L23 (error at <module>:12) else goto L21
L21:
    r67 = typed_envs.typing.globals :: static
    r68 = 'StringConverter'
    r69 = CPyDict_SetItem(r67, r68, r66)
    dec_ref r66
    r70 = r69 >= 0 :: signed
    if not r70 goto L23 (error at <module>:12) else goto L22 :: bool
L22:
    return 1
L23:
    r71 = <error> :: None
    return r71
L24:
    dec_ref r36
    goto L23
L25:
    dec_ref r43
    goto L23
L26:
    dec_ref r56
    goto L23
L27:
    dec_ref r56
    dec_ref r58
    goto L23

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12 :: object
    r13 :: str
    r14 :: dict
    r15 :: str
    r16 :: object
    r17 :: object[1]
    r18 :: object_ptr
    r19 :: object
    r20 :: dict
    r21 :: str
    r22 :: i32
    r23 :: bit
    r24 :: object
    r25 :: bool
    r26 :: str
    r27 :: object
    r28 :: str
    r29, r30 :: object
    r31 :: object[5]
    r32 :: object_ptr
    r33, r34 :: object
    r35 :: dict
    r36 :: str
    r37 :: i32
    r38 :: bit
    r39 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L15 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('TYPE_CHECKING', 'Final')
    r6 = 'typing'
    r7 = typed_envs.ENVIRONMENT_VARIABLES.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L15 (error at <module>:6) else goto L4
L4:
    typing = r8 :: module
    dec_ref r8
    r9 = ('EnvVarFactory',)
    r10 = 'typed_envs.factory'
    r11 = typed_envs.ENVIRONMENT_VARIABLES.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L15 (error at <module>:8) else goto L5
L5:
    typed_envs.factory = r12 :: module
    dec_ref r12
    if 0 goto L6 else goto L6 :: bool
L6:
    r13 = 'TYPEDENVS'
    r14 = typed_envs.ENVIRONMENT_VARIABLES.globals :: static
    r15 = 'EnvVarFactory'
    r16 = CPyDict_GetItem(r14, r15)
    if is_error(r16) goto L15 (error at <module>:14) else goto L7
L7:
    r17 = [r13]
    r18 = load_address r17
    r19 = PyObject_Vectorcall(r16, r18, 1, 0)
    dec_ref r16
    if is_error(r19) goto L15 (error at <module>:14) else goto L8
L8:
    typed_envs.ENVIRONMENT_VARIABLES._factory = r19 :: static
    r20 = typed_envs.ENVIRONMENT_VARIABLES.globals :: static
    r21 = '_factory'
    r22 = CPyDict_SetItem(r20, r21, r19)
    dec_ref r19
    r23 = r22 >= 0 :: signed
    if not r23 goto L15 (error at <module>:14) else goto L9 :: bool
L9:
    r24 = typed_envs.ENVIRONMENT_VARIABLES._factory :: static
    if is_error(r24) goto L10 else goto L12
L10:
    r25 = raise NameError('value for final name "_factory" was not set')
    if not r25 goto L15 (error at <module>:20) else goto L11 :: bool
L11:
    unreachable
L12:
    r26 = 'SHUTUP'
    r27 = load_address PyBool_Type
    r28 = 'create_env'
    r29 = box(bool, 0)
    r30 = box(bool, 0)
    r31 = [r24, r26, r27, r29, r30]
    r32 = load_address r31
    r33 = ('verbose',)
    r34 = PyObject_VectorcallMethod(r28, r32, 9223372036854775812, r33)
    if is_error(r34) goto L15 (error at <module>:20) else goto L13
L13:
    typed_envs.ENVIRONMENT_VARIABLES.SHUTUP = r34 :: static
    r35 = typed_envs.ENVIRONMENT_VARIABLES.globals :: static
    r36 = 'SHUTUP'
    r37 = CPyDict_SetItem(r35, r36, r34)
    dec_ref r34
    r38 = r37 >= 0 :: signed
    if not r38 goto L15 (error at <module>:20) else goto L14 :: bool
L14:
    return 1
L15:
    r39 = <error> :: None
    return r39

def build_subclass(type_arg):
    type_arg :: object
    r0 :: str
    r1 :: object
    r2, r3, r4 :: str
    r5 :: object
    r6 :: bit
    r7, r8 :: object
    r9 :: dict
    r10 :: str
    r11 :: object
    r12 :: tuple[object, object]
    r13 :: dict
    r14 :: bool
    r15, r16, r17 :: str
    r18 :: object
    r19, r20, r21, r22 :: str
    r23 :: object
    r24, r25, r26, r27, r28 :: str
    r29 :: object
    r30 :: union[str, None]
    r31 :: dict
    r32 :: i32
    r33 :: bit
    r34 :: i32
    r35 :: bit
    r36 :: i32
    r37 :: bit
    r38 :: i32
    r39 :: bit
    r40 :: i32
    r41 :: bit
    r42 :: str
    r43 :: bool
    r44 :: str
    r45 :: object
    r46 :: dict
    r47 :: str
    r48 :: i32
    r49 :: bit
    r50 :: str
    r51 :: bool
    r52 :: str
    r53 :: object
    r54 :: str
    r55 :: i32
    r56 :: bit
    r57, r58 :: object
    r59 :: object[3]
    r60 :: object_ptr
    r61 :: object
    r62 :: tuple[object, object, object]
    r63 :: object
    r64 :: str
    r65 :: object
    r66 :: bit
    r67 :: object
    r68 :: str
    r69 :: object
    r70 :: tuple
    r71 :: str
    r72 :: object
    r73, r74, r75 :: str
    r76, r77 :: object
    r78 :: str
    r79, r80 :: object
    r81 :: object[2]
    r82 :: object_ptr
    r83 :: object
    r84 :: tuple
    r85, r86 :: str
    r87 :: object
    r88 :: str
    r89 :: object
    r90 :: list
    r91 :: object
    r92 :: i32
    r93 :: bit
    r94 :: i32
    r95 :: bit
    r96 :: i32
    r97 :: bit
    r98 :: tuple
    r99 :: object
    r100 :: bit
    r101 :: object
L0:
    r0 = 'EnvironmentVariable['
    r1 = CPy_GetName(type_arg)
    if is_error(r1) goto L57 (error at build_subclass:26) else goto L1
L1:
    r2 = cast(str, r1)
    if is_error(r2) goto L57 (error at build_subclass:26) else goto L2
L2:
    r3 = ']'
    r4 = CPyStr_Build(3, r0, r2, r3)
    dec_ref r2
    if is_error(r4) goto L57 (error at build_subclass:26) else goto L3
L3:
    r5 = load_address PyBool_Type
    r6 = type_arg == r5
    if r6 goto L4 else goto L5 :: bool
L4:
    r7 = load_address PyLong_Type
    inc_ref r7
    r8 = r7
    goto L6
L5:
    inc_ref type_arg
    r8 = type_arg
L6:
    r9 = typed_envs._typed.globals :: static
    r10 = 'EnvironmentVariable'
    r11 = CPyDict_GetItem(r9, r10)
    if is_error(r11) goto L58 (error at build_subclass:27) else goto L7
L7:
    r12 = (r8, r11)
    r13 = typed_envs._typed.__TYPED_CLS_DICT_CONSTANTS :: static
    if is_error(r13) goto L59 else goto L10
L8:
    r14 = raise NameError('value for final name "__TYPED_CLS_DICT_CONSTANTS" was not set')
    if not r14 goto L57 (error at build_subclass:29) else goto L9 :: bool
L9:
    unreachable
L10:
    r15 = '__args__'
    r16 = '__module__'
    r17 = '__module__'
    r18 = CPyObject_GetAttr(type_arg, r17)
    if is_error(r18) goto L60 (error at build_subclass:31) else goto L11
L11:
    r19 = cast(str, r18)
    if is_error(r19) goto L60 (error at build_subclass:31) else goto L12
L12:
    r20 = '__qualname__'
    r21 = 'EnvironmentVariable['
    r22 = '__qualname__'
    r23 = CPyObject_GetAttr(type_arg, r22)
    if is_error(r23) goto L61 (error at build_subclass:32) else goto L13
L13:
    r24 = cast(str, r23)
    if is_error(r24) goto L61 (error at build_subclass:32) else goto L14
L14:
    r25 = ']'
    r26 = CPyStr_Build(3, r21, r24, r25)
    dec_ref r24
    if is_error(r26) goto L61 (error at build_subclass:32) else goto L15
L15:
    r27 = '__doc__'
    r28 = '__doc__'
    r29 = CPyObject_GetAttr(type_arg, r28)
    if is_error(r29) goto L62 (error at build_subclass:33) else goto L16
L16:
    r30 = cast(union[str, None], r29)
    if is_error(r30) goto L62 (error at build_subclass:33) else goto L17
L17:
    r31 = PyDict_New()
    if is_error(r31) goto L63 (error at build_subclass:28) else goto L18
L18:
    r32 = CPyDict_UpdateInDisplay(r31, r13)
    r33 = r32 >= 0 :: signed
    if not r33 goto L64 (error at build_subclass:28) else goto L19 :: bool
L19:
    r34 = CPyDict_SetItem(r31, r15, type_arg)
    r35 = r34 >= 0 :: signed
    if not r35 goto L64 (error at build_subclass:28) else goto L20 :: bool
L20:
    r36 = CPyDict_SetItem(r31, r16, r19)
    dec_ref r19
    r37 = r36 >= 0 :: signed
    if not r37 goto L65 (error at build_subclass:28) else goto L21 :: bool
L21:
    r38 = CPyDict_SetItem(r31, r20, r26)
    dec_ref r26
    r39 = r38 >= 0 :: signed
    if not r39 goto L66 (error at build_subclass:28) else goto L22 :: bool
L22:
    r40 = CPyDict_SetItem(r31, r27, r30)
    dec_ref r30
    r41 = r40 >= 0 :: signed
    if not r41 goto L67 (error at build_subclass:28) else goto L23 :: bool
L23:
    r42 = '__annotations__'
    r43 = PyObject_HasAttr(type_arg, r42)
    if r43 goto L24 else goto L27 :: bool
L24:
    r44 = '__annotations__'
    r45 = CPyObject_GetAttr(type_arg, r44)
    if is_error(r45) goto L68 (error at build_subclass:36) else goto L25
L25:
    r46 = cast(dict, r45)
    if is_error(r46) goto L68 (error at build_subclass:36) else goto L26
L26:
    r47 = '__annotations__'
    r48 = CPyDict_SetItem(r31, r47, r46)
    dec_ref r46
    r49 = r48 >= 0 :: signed
    if not r49 goto L68 (error at build_subclass:36) else goto L27 :: bool
L27:
    r50 = '__parameters__'
    r51 = PyObject_HasAttr(type_arg, r50)
    if r51 goto L28 else goto L30 :: bool
L28:
    r52 = '__parameters__'
    r53 = CPyObject_GetAttr(type_arg, r52)
    if is_error(r53) goto L68 (error at build_subclass:38) else goto L29
L29:
    r54 = '__parameters__'
    r55 = CPyDict_SetItem(r31, r54, r53)
    dec_ref r53
    r56 = r55 >= 0 :: signed
    if not r56 goto L68 (error at build_subclass:38) else goto L30 :: bool
L30:
    r57 = load_address PyType_Type
    inc_ref r12
    r58 = box(tuple[object, object], r12)
    r59 = [r4, r58, r31]
    r60 = load_address r59
    r61 = PyObject_Vectorcall(r57, r60, 3, 0)
    if is_error(r61) goto L69 (error at build_subclass:41) else goto L70
L31:
    dec_ref r4
    dec_ref r58
    dec_ref r31
    return r61
L32:
    r62 = CPy_CatchError()
    r63 = builtins :: module
    r64 = 'TypeError'
    r65 = CPyObject_GetAttr(r63, r64)
    if is_error(r65) goto L71 (error at build_subclass:42) else goto L33
L33:
    r66 = CPy_ExceptionMatches(r65)
    dec_ref r65
    if r66 goto L34 else goto L72 :: bool
L34:
    r67 = CPy_GetExcValue()
    r68 = 'args'
    r69 = CPyObject_GetAttr(r67, r68)
    dec_ref r67
    if is_error(r69) goto L71 (error at build_subclass:44) else goto L35
L35:
    r70 = cast(tuple, r69)
    if is_error(r70) goto L71 (error at build_subclass:44) else goto L36
L36:
    r71 = 'bases: '
    inc_ref r12
    r72 = box(tuple[object, object], r12)
    r73 = PyObject_Str(r72)
    dec_ref r72
    if is_error(r73) goto L73 (error at build_subclass:46) else goto L37
L37:
    r74 = CPyStr_Build(2, r71, r73)
    dec_ref r73
    if is_error(r74) goto L73 (error at build_subclass:46) else goto L38
L38:
    r75 = 'typed: '
    r76 = load_address PyType_Type
    r77 = builtins :: module
    r78 = 'map'
    r79 = CPyObject_GetAttr(r77, r78)
    if is_error(r79) goto L74 (error at build_subclass:47) else goto L39
L39:
    r80 = box(tuple[object, object], r12)
    r81 = [r76, r80]
    r82 = load_address r81
    r83 = PyObject_Vectorcall(r79, r82, 2, 0)
    dec_ref r79
    if is_error(r83) goto L75 (error at build_subclass:47) else goto L40
L40:
    dec_ref r80
    r84 = PySequence_Tuple(r83)
    dec_ref r83
    if is_error(r84) goto L76 (error at build_subclass:47) else goto L41
L41:
    r85 = PyObject_Str(r84)
    dec_ref r84
    if is_error(r85) goto L76 (error at build_subclass:47) else goto L42
L42:
    r86 = CPyStr_Build(2, r75, r85)
    dec_ref r85
    if is_error(r86) goto L76 (error at build_subclass:47) else goto L43
L43:
    r87 = builtins :: module
    r88 = 'TypeError'
    r89 = CPyObject_GetAttr(r87, r88)
    if is_error(r89) goto L77 (error at build_subclass:43) else goto L44
L44:
    r90 = PyList_New(0)
    if is_error(r90) goto L78 (error at build_subclass:43) else goto L45
L45:
    r91 = CPyList_Extend(r90, r70)
    dec_ref r70
    if is_error(r91) goto L79 (error at build_subclass:43) else goto L80
L46:
    r92 = PyList_Append(r90, r4)
    dec_ref r4
    r93 = r92 >= 0 :: signed
    if not r93 goto L81 (error at build_subclass:43) else goto L47 :: bool
L47:
    r94 = PyList_Append(r90, r74)
    dec_ref r74
    r95 = r94 >= 0 :: signed
    if not r95 goto L82 (error at build_subclass:43) else goto L48 :: bool
L48:
    r96 = PyList_Append(r90, r86)
    dec_ref r86
    r97 = r96 >= 0 :: signed
    if not r97 goto L83 (error at build_subclass:43) else goto L49 :: bool
L49:
    r98 = PyList_AsTuple(r90)
    dec_ref r90
    if is_error(r98) goto L84 (error at build_subclass:43) else goto L50
L50:
    r99 = PyObject_CallObject(r89, r98)
    dec_ref r89
    dec_ref r98
    if is_error(r99) goto L55 (error at build_subclass:43) else goto L51
L51:
    CPy_Raise(r99)
    dec_ref r99
    if not 0 goto L55 (error at build_subclass:43) else goto L85 :: bool
L52:
    unreachable
L53:
    CPy_Reraise()
    if not 0 goto L55 else goto L86 :: bool
L54:
    unreachable
L55:
    CPy_RestoreExcInfo(r62)
    dec_ref r62
    r100 = CPy_KeepPropagating()
    if not r100 goto L57 else goto L56 :: bool
L56:
    unreachable
L57:
    r101 = <error> :: object
    return r101
L58:
    dec_ref r4
    dec_ref r8
    goto L57
L59:
    dec_ref r4
    dec_ref r12
    goto L8
L60:
    dec_ref r4
    dec_ref r12
    goto L57
L61:
    dec_ref r4
    dec_ref r12
    dec_ref r19
    goto L57
L62:
    dec_ref r4
    dec_ref r12
    dec_ref r19
    dec_ref r26
    goto L57
L63:
    dec_ref r4
    dec_ref r12
    dec_ref r19
    dec_ref r26
    dec_ref r30
    goto L57
L64:
    dec_ref r4
    dec_ref r12
    dec_ref r19
    dec_ref r26
    dec_ref r30
    dec_ref r31
    goto L57
L65:
    dec_ref r4
    dec_ref r12
    dec_ref r26
    dec_ref r30
    dec_ref r31
    goto L57
L66:
    dec_ref r4
    dec_ref r12
    dec_ref r30
    dec_ref r31
    goto L57
L67:
    dec_ref r4
    dec_ref r12
    dec_ref r31
    goto L57
L68:
    dec_ref r4
    dec_ref r12
    dec_ref r31
    goto L57
L69:
    dec_ref r31
    dec_ref r58
    goto L32
L70:
    dec_ref r12
    goto L31
L71:
    dec_ref r4
    dec_ref r12
    goto L55
L72:
    dec_ref r4
    dec_ref r12
    goto L53
L73:
    dec_ref r4
    dec_ref r12
    dec_ref r70
    goto L55
L74:
    dec_ref r4
    dec_ref r12
    dec_ref r70
    dec_ref r74
    goto L55
L75:
    dec_ref r4
    dec_ref r70
    dec_ref r74
    dec_ref r80
    goto L55
L76:
    dec_ref r4
    dec_ref r70
    dec_ref r74
    goto L55
L77:
    dec_ref r4
    dec_ref r70
    dec_ref r74
    dec_ref r86
    goto L55
L78:
    dec_ref r4
    dec_ref r70
    dec_ref r74
    dec_ref r86
    dec_ref r89
    goto L55
L79:
    dec_ref r4
    dec_ref r74
    dec_ref r86
    dec_ref r89
    dec_ref r90
    goto L55
L80:
    dec_ref r91
    goto L46
L81:
    dec_ref r74
    dec_ref r86
    dec_ref r89
    dec_ref r90
    goto L55
L82:
    dec_ref r86
    dec_ref r89
    dec_ref r90
    goto L55
L83:
    dec_ref r89
    dec_ref r90
    goto L55
L84:
    dec_ref r89
    goto L55
L85:
    dec_ref r62
    goto L52
L86:
    dec_ref r62
    goto L54

def __top_level__():
    r0, r1 :: object
    r2 :: bit
    r3 :: str
    r4, r5 :: object
    r6 :: str
    r7 :: dict
    r8, r9 :: object
    r10 :: str
    r11 :: dict
    r12, r13 :: object
    r14 :: str
    r15 :: dict
    r16 :: object
    r17 :: str
    r18 :: dict
    r19 :: str
    r20 :: object
    r21 :: object[1]
    r22 :: object_ptr
    r23 :: object
    r24 :: dict
    r25 :: str
    r26 :: i32
    r27 :: bit
    r28 :: str
    r29 :: dict
    r30 :: str
    r31 :: object
    r32 :: str
    r33 :: object
    r34 :: str
    r35 :: dict
    r36 :: str
    r37 :: object
    r38 :: str
    r39 :: object
    r40 :: str
    r41 :: dict
    r42 :: str
    r43 :: object
    r44, r45 :: dict
    r46 :: str
    r47 :: i32
    r48 :: bit
    r49 :: dict
    r50 :: str
    r51 :: object
    r52 :: dict
    r53 :: str
    r54, r55 :: object
    r56 :: object[1]
    r57 :: object_ptr
    r58, r59 :: object
    r60 :: object[1]
    r61 :: object_ptr
    r62 :: object
    r63 :: dict
    r64 :: str
    r65 :: i32
    r66 :: bit
    r67 :: None
L0:
    r0 = builtins :: module
    r1 = load_address _Py_NoneStruct
    r2 = r0 != r1
    if r2 goto L3 else goto L1 :: bool
L1:
    r3 = 'builtins'
    r4 = PyImport_Import(r3)
    if is_error(r4) goto L22 (error at <module>:-1) else goto L2
L2:
    builtins = r4 :: module
    dec_ref r4
L3:
    r5 = ('lru_cache',)
    r6 = 'functools'
    r7 = typed_envs._typed.globals :: static
    r8 = CPyImport_ImportFromMany(r6, r5, r5, r7)
    if is_error(r8) goto L22 (error at <module>:1) else goto L4
L4:
    functools = r8 :: module
    dec_ref r8
    r9 = ('Final', 'Type', 'TypeVar')
    r10 = 'typing'
    r11 = typed_envs._typed.globals :: static
    r12 = CPyImport_ImportFromMany(r10, r9, r9, r11)
    if is_error(r12) goto L22 (error at <module>:2) else goto L5
L5:
    typing = r12 :: module
    dec_ref r12
    r13 = ('EnvironmentVariable',)
    r14 = 'typed_envs._env_var'
    r15 = typed_envs._typed.globals :: static
    r16 = CPyImport_ImportFromMany(r14, r13, r13, r15)
    if is_error(r16) goto L22 (error at <module>:4) else goto L6
L6:
    typed_envs._env_var = r16 :: module
    dec_ref r16
    r17 = 'T'
    r18 = typed_envs._typed.globals :: static
    r19 = 'TypeVar'
    r20 = CPyDict_GetItem(r18, r19)
    if is_error(r20) goto L22 (error at <module>:7) else goto L7
L7:
    r21 = [r17]
    r22 = load_address r21
    r23 = PyObject_Vectorcall(r20, r22, 1, 0)
    dec_ref r20
    if is_error(r23) goto L22 (error at <module>:7) else goto L8
L8:
    r24 = typed_envs._typed.globals :: static
    r25 = 'T'
    r26 = CPyDict_SetItem(r24, r25, r23)
    dec_ref r23
    r27 = r26 >= 0 :: signed
    if not r27 goto L22 (error at <module>:7) else goto L9 :: bool
L9:
    r28 = '__repr__'
    r29 = typed_envs._typed.globals :: static
    r30 = 'EnvironmentVariable'
    r31 = CPyDict_GetItem(r29, r30)
    if is_error(r31) goto L22 (error at <module>:11) else goto L10
L10:
    r32 = '__repr__'
    r33 = CPyObject_GetAttr(r31, r32)
    dec_ref r31
    if is_error(r33) goto L22 (error at <module>:11) else goto L11
L11:
    r34 = '__str__'
    r35 = typed_envs._typed.globals :: static
    r36 = 'EnvironmentVariable'
    r37 = CPyDict_GetItem(r35, r36)
    if is_error(r37) goto L23 (error at <module>:12) else goto L12
L12:
    r38 = '__str__'
    r39 = CPyObject_GetAttr(r37, r38)
    dec_ref r37
    if is_error(r39) goto L23 (error at <module>:12) else goto L13
L13:
    r40 = '__origin__'
    r41 = typed_envs._typed.globals :: static
    r42 = 'EnvironmentVariable'
    r43 = CPyDict_GetItem(r41, r42)
    if is_error(r43) goto L24 (error at <module>:13) else goto L14
L14:
    r44 = CPyDict_Build(3, r28, r33, r34, r39, r40, r43)
    dec_ref r33
    dec_ref r39
    dec_ref r43
    if is_error(r44) goto L22 (error at <module>:10) else goto L15
L15:
    typed_envs._typed.__TYPED_CLS_DICT_CONSTANTS = r44 :: static
    r45 = typed_envs._typed.globals :: static
    r46 = '__TYPED_CLS_DICT_CONSTANTS'
    r47 = CPyDict_SetItem(r45, r46, r44)
    dec_ref r44
    r48 = r47 >= 0 :: signed
    if not r48 goto L22 (error at <module>:10) else goto L16 :: bool
L16:
    r49 = typed_envs._typed.globals :: static
    r50 = 'build_subclass'
    r51 = CPyDict_GetItem(r49, r50)
    if is_error(r51) goto L22 (error at <module>:17) else goto L17
L17:
    r52 = typed_envs._typed.globals :: static
    r53 = 'lru_cache'
    r54 = CPyDict_GetItem(r52, r53)
    if is_error(r54) goto L25 (error at <module>:17) else goto L18
L18:
    r55 = box(None, 1)
    r56 = [r55]
    r57 = load_address r56
    r58 = ('maxsize',)
    r59 = PyObject_Vectorcall(r54, r57, 0, r58)
    dec_ref r54
    if is_error(r59) goto L25 (error at <module>:17) else goto L19
L19:
    r60 = [r51]
    r61 = load_address r60
    r62 = PyObject_Vectorcall(r59, r61, 1, 0)
    dec_ref r59
    if is_error(r62) goto L25 (error at <module>:17) else goto L20
L20:
    dec_ref r51
    r63 = typed_envs._typed.globals :: static
    r64 = 'build_subclass'
    r65 = PyDict_SetItem(r63, r64, r62)
    dec_ref r62
    r66 = r65 >= 0 :: signed
    if not r66 goto L22 (error at <module>:17) else goto L21 :: bool
L21:
    return 1
L22:
    r67 = <error> :: None
    return r67
L23:
    dec_ref r33
    goto L22
L24:
    dec_ref r33
    dec_ref r39
    goto L22
L25:
    dec_ref r51
    goto L22
